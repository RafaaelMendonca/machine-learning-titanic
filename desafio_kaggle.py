# -*- coding: utf-8 -*-
"""Desafio Kaggle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-FAat63e9Ch9UmEunoUrr4wHPe3zwx3q
"""

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/MyDrive/Kaggle/train.csv")

df.columns

df.isnull().sum()



df['Age'].fillna(df['Age'].mean(), inplace=True)

df.head()
# 1 - sobreviveu | 0 - morreu

df['Survived'].value_counts()

df.columns

x_df = df.iloc[:,[2,4,5]]
# x_df = df.iloc[:,[2,4]]
y_df = df.iloc[:,[1]]

x_df.columns

x_df

y_df.columns

from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer

x_df.columns

label_encoder = LabelEncoder()

x_df.iloc[:,1] = label_encoder.fit_transform(x_df.iloc[:,1])

x_df

standard_scaler = StandardScaler()
x_df = standard_scaler.fit_transform(x_df)

y_df

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB

x_training, x_test, y_training, y_test = train_test_split(x_df, y_df, test_size=0.25, random_state=42)



# arvore_df = DecisionTreeClassifier(criterion='entropy', max_depth=5, random_state=42) #max_depth - limita a profundidade
forest_df = RandomForestClassifier(n_estimators=100, random_state=42) # sem o random_state, ele fica gerando varios resultados

forest_df.fit(x_training, y_training)
previsoes = forest_df.predict(x_test)
accuracy_score(y_test, previsoes)



new_df = pd.read_csv("/content/drive/MyDrive/Kaggle/test.csv")

new_df.columns

# Treinamento do x Ã© sex e age

new_df['Age'].fillna(new_df['Age'].mean(), inplace=True)
new_df.columns

x_new_df = new_df.iloc[:,[1,3,4]]

x_new_df.columns

new_labelencoder = LabelEncoder()
x_new_df.iloc[:,1] = label_encoder.fit_transform(x_new_df.iloc[:,1])

x_new_df = standard_scaler.fit_transform(x_new_df)

x_new_df

new_predict = forest_df.predict(x_new_df)

df.columns

results_df = pd.DataFrame({
    'PassengerId': new_df['PassengerId'],
    'Survived': new_predict
})

results_df.head()

results_df.to_csv('new_predict.csv', index=False)

